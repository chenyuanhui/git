Git是目前世界上最先进的分布式版本控制系统（没有之一）。
特点：分布式、强大的分支管理、原子提交
Linux上安装Git
sudo apt-get install git-core|git
tar -zxvf xxx.tar.gz
./config，make，sudo make install

在Mac OS X上安装Git
1、homebrew
2、Xcode
在Windows上安装Git
http://msysgit.github.io/
配置：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向的版本就是当前版本（上一个版本HEAD^，上上一个版本HEAD^^，上一百个版本HEAD~100），
因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id|HEAD^

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

Git是如何跟踪修改的:每次修改，如果不add到暂存区，那就不会加入到commit中。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，
想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset --hard commit_id，
不过前提是没有推送到远程库。

命令git rm用于删除一个文件。
如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，
也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！
当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

克隆远程仓库：
	git clone git@github.com:chenyuanhui/test.git
	git clone git://github.com/chenyuanhui/test.git
	git clone https://github.com/chenyuanhui/test.git
	
git创建、切换、合并、删除分支在一秒之内就能完成
所以git大力提倡使用分支：
查看分支：git branch 
创建分支：git branch <name>
切换分支：git checkout <name>
创建、切换分支：git checkout -b <name>
合并分支到当前分支：git merge <name>
删除分支：git branch -d <name>

合并分支时：git merge feature1 
			---->Automatic merge failed : fix conflicts ......
git无法自动合并分支时，就必须先解决conflicts，解决后再提交合并完成
查看分支合并图：git log --graph --pretty=oneline --abbrev-commit

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，
修复后，再git stash pop，回到工作现场。
bug修复过程：
git stash
git checkout master
git checkout -b issue-101
git add readme.txt
git commit --no-ff -m "fix bug 101"
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101
git checkout dev
git status
git stash list
git stash pop
|git stash apply stash@{0} 
+git stash drop stash@{0}

开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
git show <tagname>可以看到PGP签名信息

命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

使用github：
首先fork一个开源项目到自己的github账号的repository下，然后就可以clone到本地工作了。

自定义git:
           git config --global user.name "username" 
		   git config --global user.email "email@xxx.com"
		   git congig --global color.ui true
		   
忽略特殊文件：
			在working directory 里新建.gitignore文件，把要忽略的文件名填进去。
			.gitignore文件本身也要commit进版本库repository里
			
配置别名：

		git config --global alias. unstage 'reset HEAD'
		
		也可在.git/congit或者在用户目录下的.gitconfig文件中配置
		
		eg:
		$ git config --global alias.st status
		$ git config --global alias.co checkout
		$ git config --global alias.ci commit
		$ git config --global alias.br branch
		$ git config --global alias.unstage 'reset HEAD'
		$ git config --global alias.last 'log -1'
$git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
		
    搭建git服务器（要有sudo权限的用户账号）：
	第一步，安装git：
	$ sudo apt-get install git
	第二步，创建一个git用户，用来运行git服务：
	$ sudo adduser git
	第三步，创建证书登录：
	收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
	第四步，初始化Git仓库：
	先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
	$ sudo git init --bare sample.git
	然后，把owner改为git
	$ sudo chown -R git:git sample.git
	第五步，禁用shell登录：
	编辑/etc/passwd文件
	git:x:1001:1001:,,,:/home/git:/bin/bash
	改为：
	git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
	第六步，克隆远程仓库：
	在各自的电脑上运行：
	$ git clone git@server:/srv/sample.git
	
	要方便管理公钥，用Gitosis；
	要像SVN那样变态地控制权限，用Gitolite。

	
	附件：
			Clone an existing repository 
		$ git clone ssh://user@domain.com/repo.git
		Create a new local repository
		$ git init

		LOCAL CHANGES
		Changed files in your working directory
		$ git status
		Changes to tracked files 
		$ git diff
		Add all current changes to the next commit 
		$ git add .
		Add some changes in <file> to the next commit
		$ git add -p <file>
		Commit all local changes in tracked files
		$ git commit -a
		Commit previously staged changes
		$ git commit
		Change the last commit 
		Don‘t amend published commits!
		$ git commit --amend 


		COMMIT HISTORY
		Show all commits, starting with newest
		$ git log
		Show changes over time for a specific file 
		$ git log -p <file>
		Who changed what and when in <file>
		$ git blame <file>

		30-day free trial available at 
		www.git-tower.com
		 
		BRANCHES & TAGS
		List all existing branches
		$ git branch -av
		Switch HEAD branch
		$ git checkout <branch>
		Create a new branch based 
		on your current HEAD
		$ git branch <new-branch>
		Create a new tracking branch based on 
		a remote branch
		$ git checkout --track <remote/bran-
		ch>
		Delete a local branch
		$ git branch -d <branch>
		Mark the current commit with a tag
		$ git tag <tag-name>

		UPDATE & PUBLISH
		List all currently configured remotes 
		$ git remote -v
		Show information about a remote 
		$ git remote show <remote>
		Add new remote repository, named <remote> 
		$ git remote add <shortname> <url>
		Download all changes from <remote>, 
		but don‘t integrate into HEAD 
		$ git fetch <remote>
		Download changes and directly 
		merge/integrate into HEAD
		$ git pull <remote> <branch>
		Publish local changes on a remote
		$ git push <remote> <branch>
		Delete a branch on the remote
		$ git branch -dr <remote/branch>
		Publish your tags 
		$ git push --tags
		 
		MERGE & REBASE
		Merge <branch> into your current HEAD 
		$ git merge <branch>
		Rebase your current HEAD onto <branch> 
		Don‘t rebase published commits!
		$ git rebase <branch> 
		Abort a rebase
		$ git rebase --abort
		Continue a rebase after resolving conflicts
		$ git rebase --continue
		Use your configured merge tool to 
		solve conflicts 
		$ git mergetool
		Use your editor to manually solve conflicts 
		and (after resolving) mark file as resolved 
		$ git add <resolved-file> 
		$ git rm <resolved-file>

		UNDO
		Discard all local changes in your working 
		directory 
		$ git reset --hard HEAD
		Discard local changes in a specific file 
		$ git checkout HEAD <file>
		Revert a commit (by producing a new commit 
		with contrary changes) 
		$ git revert <commit>
		Reset your HEAD pointer to a previous commit 
		…and discard all changes since then
		$ git reset --hard <commit>
		…and preserve all changes as unstaged 
		changes
		$ git reset <commit>
		…and preserve uncommitted local changes 
		$ git reset --keep <commit> 
